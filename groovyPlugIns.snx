<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<digital-asset id="DoFinalizeInvoice" short-description="DoFinalizeInvoice" format="GROOVY" groovy-code=" package SourceCode.GroovyPlugins&#xA；&#xA；import java.text.SimpleDateFormat&#xA；&#xA；import com.navis.argo.business.api.GroovyApi;&#xA；import com.navis.argo.business.model.GeneralReference;&#xA；import com.navis.billing.BillingField;&#xA；import com.navis.billing.business.api.IInvoiceManager;&#xA；import com.navis.billing.business.model.Invoice;&#xA；import com.navis.billing.business.model.InvoiceItem&#xA；import com.navis.framework.business.Roastery;&#xA；import com.navis.framework.metafields.MetafieldEntry;&#xA；import com.navis.framework.metafields.MetafieldId&#xA；import com.navis.framework.persistence.HibernateApi;&#xA；import com.navis.framework.portal.FieldChanges;&#xA；import com.navis.framework.portal.Ordering;&#xA；import com.navis.framework.portal.QueryUtils&#xA；import com.navis.framework.portal.query.DomainQuery;&#xA；import com.navis.framework.portal.query.PredicateFactory;&#xA；import com.navis.framework.query.common.api.QueryResult&#xA；import org.apache.axis.utils.StringUtils;&#xA；import org.apache.commons.lang.builder.ToStringBuilder;&#xA；&#xA；&#xA；public class DoFinalizeInvoice extends GroovyApi {&#xA；	private static ServiceSoapProxy proxy=new ServiceSoapProxy();&#xA；	private static String reasonCode=&quot;&quot;;&#xA；	private static String reason=&quot;&quot;;&#xA；	private static SimpleDateFormat sf=new SimpleDateFormat(&quot;yyyyMMddHHmmssSS&quot;);&#xA；&#xA；	public void execute(Map map){&#xA；		&#xA；&#xA；		this.log(&quot;-----1------doFinalizeInvoice start---&quot;);&#xA；		QueryResult rs= getInvoiceResult(&quot;Y&quot;);&#xA；		if(rs==null){&#xA；			&#xA；&#xA；			this.log(&quot;-----2------doFinalizeInvoice,rs=null, end---&quot;);&#xA；			return ;&#xA；		}&#xA；		this.log(&quot;-----2---------rs=&quot;+ToStringBuilder.reflectionToString(rs));&#xA；		Iterator it = rs.getIterator();&#xA；		int i=0;&#xA；//		String currentId=sf.format(new Date());&#xA；		List&lt;Invoice&gt; invList=new ArrayList&lt;Invoice&gt;();&#xA；//		this.log(&quot;-----2.1---------currentId=&quot;+currentId);&#xA；		while(it.hasNext()){&#xA；			&#xA；&#xA；			this.log(&quot;-----3.1---------&quot;);&#xA；			String gkey =(String) rs.getValue(i++, 0);&#xA；			it.next();&#xA；			this.log(&quot;-----3.2---------gkey=&quot;+gkey);&#xA；			Invoice inv=getInvoice(gkey);&#xA；			this.log(&quot;-----3.2.1---------inv=&quot;+ToStringBuilder.reflectionToString(inv));&#xA；			FieldChanges fieldChanges = new FieldChanges();&#xA；			fieldChanges.setFieldChange(BillingField.INVOICE_FLEX_STRING03, null);&#xA；			inv.applyFieldChanges(fieldChanges);&#xA；			invList.add(inv);&#xA；			this.log(&quot;-----3.2.2---------flexString03=&quot;+inv.getInvoiceFlexString03());&#xA；			this.log(&quot;-----3.2.3---------invList.size=&quot;+invList.size());&#xA；		}&#xA；		&#xA；		for(Invoice invoice:invList){&#xA；			&#xA；&#xA；			boolean isSuccess=false;&#xA；			int count=0;&#xA；			while(count&lt;3){&#xA；				&#xA；&#xA；				this.log(&quot;----3.3.1,count=&quot;+count);&#xA；				try{&#xA；					&#xA；&#xA；					this.log(&quot;----3.3.2,isSuccess=&quot;+isSuccess);&#xA；					isSuccess= finalizeInvoice(invoice);&#xA；					reasonCode=&quot;&quot;;&#xA；					reason=&quot;&quot;;&#xA；					if(!isSuccess&amp;&amp;!StringUtils.isEmpty(invoice.getInvoiceFinalNbr())){&#xA；						&#xA；&#xA；						reasonCode=&quot;022&quot;;&#xA；						reason=&quot;the invoice has already finaled&quot;;&#xA；					}&#xA；					this.log(&quot;----3.3.3,isSuccess=&quot;+isSuccess);&#xA；					break;&#xA；				}catch(Exception e){&#xA；					&#xA；&#xA；					e.printStackTrace();&#xA；					count++;&#xA；					reasonCode=&quot;999&quot;;&#xA；					reason=e.getMessage();&#xA；					this.log(&quot;----3.3.4,count++=&quot;+count);&#xA；					this.log(&quot;----3.3.5,reason=&quot;+reason);&#xA；				}&#xA；			}&#xA；			Map&lt;String,String&gt; itemMap=new HashMap&lt;String,String&gt;();&#xA；			String status=&quot;REJECTED&quot;;&#xA；			if(isSuccess){&#xA；				&#xA；&#xA；				status=&quot;ACCEPTED&quot;;&#xA；				Set&lt;InvoiceItem&gt; itemSet=(Set&lt;InvoiceItem&gt;)invoice.getInvoiceInvoiceItems();&#xA；				if(itemSet!=null){&#xA；					&#xA；&#xA；					Iterator&lt;InvoiceItem&gt; itat=itemSet.iterator();&#xA；					while(itat.hasNext()){&#xA；						&#xA；&#xA；						InvoiceItem item=itat.next();&#xA；//						String value=&quot;,&quot;;&#xA；						String value=item.getItemNotes();&#xA；						this.log(&quot;----------3.4------,seq+created=&quot;+value);&#xA；						itemMap.put(String.valueOf(item.getItemGkey()), value);&#xA；					}&#xA；				}&#xA；			}&#xA；			&#xA；			this.log(&quot;-----3.5---------itemMap=&quot;+ToStringBuilder.reflectionToString(itemMap));&#xA；			String results=createFinalXmlByInvoice(invoice.getInvoiceFinalNbr(),itemMap,invoice.getInvoiceFlexString04(),status,reasonCode,reason);&#xA；			this.log(&quot;-----3.6---------before string03=&quot;+invoice.getInvoiceFlexString03());&#xA；			FieldChanges fieldChanges = new FieldChanges();&#xA；//			fieldChanges.setFieldChange(BillingField.INVOICE_FLEX_STRING03, null);&#xA；			fieldChanges.setFieldChange(BillingField.INVOICE_FLEX_STRING04, null);&#xA；			invoice.applyFieldChanges(fieldChanges);&#xA；			this.log(&quot;-----3.7---------after string03=&quot;+invoice.getInvoiceFlexString03());&#xA；			this.log(&quot;------3.8--------,xml=&quot;+results);&#xA；			String ret=proxy.finalInvoiceResponse(results);&#xA；			this.log(&quot;-----3.9-----response:finalNbr=&quot;+invoice.getInvoiceFinalNbr()+&quot;,response=&quot;+ret);&#xA；		}&#xA；	}&#xA；	&#xA；	Invoice getInvoice(String gkey){&#xA；		&#xA；&#xA；		DomainQuery dq = QueryUtils.createDomainQuery(&quot;Invoice&quot;);&#xA；		MetafieldId miGK = (new MetafieldEntry(&quot;invoiceGkey&quot;).getMetafieldId());&#xA；		dq.addDqPredicate(PredicateFactory.eq(miGK,gkey));&#xA；		dq.addDqOrdering(Ordering.desc(miGK));&#xA；		dq.setMaxResults(1);&#xA；		HibernateApi hbrapi = Roastery.getHibernateApi();&#xA；		return (Invoice) hbrapi.getUniqueEntityByDomainQuery(dq);&#xA；	}&#xA；	&#xA；	QueryResult getInvoiceResult(String value) {&#xA；        &#xA；&#xA；        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Invoice&quot;);&#xA；        MetafieldId miID = (new MetafieldEntry(&quot;invoiceFlexString03&quot;).getMetafieldId());&#xA；        MetafieldId miGK = (new MetafieldEntry(&quot;invoiceGkey&quot;).getMetafieldId());&#xA；        dq.addDqPredicate(PredicateFactory.eq(miID,value));&#xA；        dq.addDqOrdering(Ordering.desc(miGK));&#xA；        dq.setMaxResults(99999);&#xA；        HibernateApi hbrapi = Roastery.getHibernateApi();&#xA；        return hbrapi.findValuesByDomainQuery(dq);&#xA；    }&#xA；	&#xA；	private boolean finalizeInvoice(Invoice inInvoice){&#xA；		&#xA；&#xA；		boolean result = false;&#xA；		if (inInvoice == null){&#xA；			&#xA；&#xA；			return result;&#xA；		}&#xA；		if(!inInvoice.isFinalized()){&#xA；			&#xA；&#xA；			IInvoiceManager invoiceManager = (IInvoiceManager) Roastery.getBean(IInvoiceManager.BEAN_ID);&#xA；			this.log(&quot;-----3.4.1---------invoiceManager=&quot;+ToStringBuilder.reflectionToString(invoiceManager));&#xA；			this.log(&quot;----3.4.2----doFinalize start:&quot;+new Date());&#xA；			invoiceManager.doFinalize(inInvoice);&#xA；			this.log(&quot;----3.4.3----doFinalize end:&quot;+new Date());&#xA；			inInvoice.setInvoiceFinalizedDate(new Date());&#xA；			result =true;&#xA；		}&#xA；&#xA；		return result;&#xA；	}&#xA；	&#xA；	private String createFinalXmlByInvoice(String finalNumber,Map&lt;String,String&gt; finalMap,String prevId,String status,String reasonCode,String reason){&#xA；		  &#xA；&#xA；		  StringBuffer result=new StringBuffer(&quot;&lt;basicInvokeResponse&gt;&lt;update_status&gt;&lt;request_id&gt;&quot;+createRequestId()+&quot;&lt;/request_id&gt;&lt;prev_request_id&gt;&quot;+prevId+&quot;&lt;/prev_request_id&gt;&lt;request_type&gt;FINAL&lt;/request_type&gt;&lt;status&gt;&quot;+status+&quot;&lt;/status&gt;&lt;final_invoice_number&gt;&quot;+finalNumber+&quot;&lt;/final_invoice_number&gt;&lt;reject_reason_code&gt;&quot;+reasonCode+&quot;&lt;/reject_reason_code&gt;&lt;reject_reason&gt;&quot;+reason+&quot;&lt;/reject_reason&gt;&quot;);&#xA；		  Iterator&lt;String&gt; it=finalMap.keySet().iterator();&#xA；		  while(it.hasNext()){&#xA；			  &#xA；&#xA；			  String key=it.next();&#xA；			  String[] values = finalMap.get(key).split(&quot;,&quot;);&#xA；			  String seq=&quot;&quot;;&#xA；			  String isCreate=&quot;&quot;;&#xA；			  if(values.length&gt;0){&#xA；				  &#xA；&#xA；				  seq=values[0];&#xA；			  }&#xA；			  if(values.length&gt;1){&#xA；				  &#xA；&#xA；				  isCreate=values[1];&#xA；			  }&#xA；			  result.append(&quot;&lt;invoice_item&gt;&lt;invoice_item_id&gt;&quot;+key+&quot;&lt;/invoice_item_id&gt;&lt;cashier_item_seq&gt;&quot;+seq+&quot;&lt;/cashier_item_seq&gt;&lt;invoice_item_cashier_created&gt;&quot;+isCreate+&quot;&lt;/invoice_item_cashier_created&gt;&lt;invoice_item_status&gt;ACCEPTED&lt;/invoice_item_status&gt;&lt;invoice_item_reject_reason_code&gt;&lt;/invoice_item_reject_reason_code&gt;&lt;invoice_item_reject_reason&gt;&lt;/invoice_item_reject_reason&gt;&lt;/invoice_item&gt;&quot;);&#xA；		  }&#xA；		  result.append(&quot;&lt;/update_status&gt;&lt;/basicInvokeResponse&gt;&quot;);&#xA；		  return result.toString();&#xA；	  &#xA；	}&#xA；	&#xA；	private static synchronized String createRequestId(){&#xA；		&#xA；&#xA；		return &quot;DCB&quot;+sf.format(new Date());&#xA；	}&#xA；}&#xA；&#xA；&#xA；&#xA；class ServiceSoapProxy implements ServiceSoap {&#xA；	  private String _endpoint = null;&#xA；	  private ServiceSoap serviceSoap = null;&#xA；	  &#xA；	  public ServiceSoapProxy() {&#xA；&#xA；	    _initServiceSoapProxy();&#xA；	  }&#xA；	  &#xA；	  public ServiceSoapProxy(String endpoint) {&#xA；&#xA；	    _endpoint = endpoint;&#xA；	    _initServiceSoapProxy();&#xA；	  }&#xA；	  &#xA；	  private void _initServiceSoapProxy() {&#xA；&#xA；	    try {&#xA；&#xA；	      serviceSoap = (new ServiceLocator()).getServiceSoap();&#xA；	      if (serviceSoap != null) {&#xA；&#xA；	        if (_endpoint != null)&#xA；	          ((javax.xml.rpc.Stub)serviceSoap)._setProperty(&quot;javax.xml.rpc.service.endpoint.address&quot;, _endpoint);&#xA；	        else&#xA；	          _endpoint = (String)((javax.xml.rpc.Stub)serviceSoap)._getProperty(&quot;javax.xml.rpc.service.endpoint.address&quot;);&#xA；	      }&#xA；	      &#xA；	    }&#xA；	    catch (javax.xml.rpc.ServiceException serviceException) {}&#xA；	  }&#xA；	  &#xA；	  public String getEndpoint() {&#xA；&#xA；	    return _endpoint;&#xA；	  }&#xA；	  &#xA；	  public void setEndpoint(String endpoint) {&#xA；&#xA；	    _endpoint = endpoint;&#xA；	    if (serviceSoap != null)&#xA；	      ((javax.xml.rpc.Stub)serviceSoap)._setProperty(&quot;javax.xml.rpc.service.endpoint.address&quot;, _endpoint);&#xA；	    &#xA；	  }&#xA；	  &#xA；	  public ServiceSoap getServiceSoap() {&#xA；&#xA；	    if (serviceSoap == null)&#xA；	      _initServiceSoapProxy();&#xA；	    return serviceSoap;&#xA；	  }&#xA；	  &#xA；	  public java.lang.String finalInvoiceResponse(java.lang.String inputParm) throws java.rmi.RemoteException{&#xA；&#xA；	    if (serviceSoap == null)&#xA；	      _initServiceSoapProxy();&#xA；	    return serviceSoap.finalInvoiceResponse(inputParm);&#xA；	  }&#xA；	  &#xA；	  &#xA；	}&#xA；&#xA；	class ServiceLocator extends org.apache.axis.client.Service implements Service {&#xA；		private static GeneralReference ediServiceReference=GeneralReference.findUniqueEntryById(&quot;EDISERVICE&quot;, &quot;config&quot;, null, null);&#xA；	    public ServiceLocator() {&#xA；&#xA；	    }&#xA；&#xA；&#xA；	    public ServiceLocator(org.apache.axis.EngineConfiguration config) {&#xA；	        super(config);&#xA；	    }&#xA；&#xA；	    public ServiceLocator(java.lang.String wsdlLoc, javax.xml.namespace.QName sName) throws javax.xml.rpc.ServiceException {&#xA；	        super(wsdlLoc, sName);&#xA；	    }&#xA；	    &#xA；	    // Use to get a proxy class for ServiceSoap&#xA；	    private java.lang.String ServiceSoap_address = ediServiceReference.getRefValue1();&#xA；&#xA；	    public java.lang.String getServiceSoapAddress() {&#xA；&#xA；	        return ServiceSoap_address;&#xA；	    }&#xA；&#xA；	    // The WSDD service name defaults to the port name.&#xA；	    private java.lang.String ServiceSoapWSDDServiceName = &quot;ServiceSoap&quot;;&#xA；&#xA；	    public java.lang.String getServiceSoapWSDDServiceName() {&#xA；&#xA；	        return ServiceSoapWSDDServiceName;&#xA；	    }&#xA；&#xA；	    public void setServiceSoapWSDDServiceName(java.lang.String name) {&#xA；&#xA；	        ServiceSoapWSDDServiceName = name;&#xA；	    }&#xA；&#xA；	    public ServiceSoap getServiceSoap() throws javax.xml.rpc.ServiceException {&#xA；&#xA；	       java.net.URL endpoint;&#xA；	        try {&#xA；&#xA；	            endpoint = new java.net.URL(ServiceSoap_address);&#xA；	        }&#xA；	        catch (java.net.MalformedURLException e) {&#xA；&#xA；	            throw new javax.xml.rpc.ServiceException(e);&#xA；	        }&#xA；	        return getServiceSoap(endpoint);&#xA；	    }&#xA；&#xA；	    public ServiceSoap getServiceSoap(java.net.URL portAddress) throws javax.xml.rpc.ServiceException {&#xA；&#xA；	        try {&#xA；&#xA；	            ServiceSoapStub _stub = new ServiceSoapStub(portAddress, this);&#xA；	            _stub.setPortName(getServiceSoapWSDDServiceName());&#xA；	            return _stub;&#xA；	        }&#xA；	        catch (org.apache.axis.AxisFault e) {&#xA；&#xA；	            return null;&#xA；	        }&#xA；	    }&#xA；&#xA；	    public void setServiceSoapEndpointAddress(java.lang.String address) {&#xA；&#xA；	        ServiceSoap_address = address;&#xA；	    }&#xA；&#xA；	    /**&#xA；	     * For the given interface, get the stub implementation.&#xA；	     * If this service has no port for the given interface,&#xA；	     * then ServiceException is thrown.&#xA；	     */&#xA；	    public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {&#xA；&#xA；	        try {&#xA；&#xA；	            if (ServiceSoap.class.isAssignableFrom(serviceEndpointInterface)) {&#xA；&#xA；	                ServiceSoapStub _stub = new ServiceSoapStub(new java.net.URL(ServiceSoap_address), this);&#xA；	                _stub.setPortName(getServiceSoapWSDDServiceName());&#xA；	                return _stub;&#xA；	            }&#xA；	        }&#xA；	        catch (java.lang.Throwable t) {&#xA；&#xA；	            throw new javax.xml.rpc.ServiceException(t);&#xA；	        }&#xA；	        throw new javax.xml.rpc.ServiceException(&quot;There is no stub implementation for the interface:  &quot; + (serviceEndpointInterface == null ? &quot;null&quot; : serviceEndpointInterface.getName()));&#xA；	    }&#xA；&#xA；	    /**&#xA；	     * For the given interface, get the stub implementation.&#xA；	     * If this service has no port for the given interface,&#xA；	     * then ServiceException is thrown.&#xA；	     */&#xA；	    public java.rmi.Remote getPort(javax.xml.namespace.QName portName, Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {&#xA；&#xA；	        if (portName == null) {&#xA；&#xA；	            return getPort(serviceEndpointInterface);&#xA；	        }&#xA；	        java.lang.String inputPortName = portName.getLocalPart();&#xA；	        if (&quot;ServiceSoap&quot;.equals(inputPortName)) {&#xA；&#xA；	            return getServiceSoap();&#xA；	        }&#xA；	        else  {&#xA；&#xA；	            java.rmi.Remote _stub = getPort(serviceEndpointInterface);&#xA；	            ((org.apache.axis.client.Stub) _stub).setPortName(portName);&#xA；	            return _stub;&#xA；	        }&#xA；	    }&#xA；&#xA；	    public javax.xml.namespace.QName getServiceName() {&#xA；&#xA；	        return new javax.xml.namespace.QName(&quot;http://tempuri.org/&quot;, &quot;Service&quot;);&#xA；	    }&#xA；&#xA；	    private java.util.HashSet ports = null;&#xA；&#xA；	    public java.util.Iterator getPorts() {&#xA；&#xA；	        if (ports == null) {&#xA；&#xA；	            ports = new java.util.HashSet();&#xA；	            ports.add(new javax.xml.namespace.QName(&quot;http://tempuri.org/&quot;, &quot;ServiceSoap&quot;));&#xA；	        }&#xA；	        return ports.iterator();&#xA；	    }&#xA；&#xA；	    /**&#xA；	    * Set the endpoint address for the specified port name.&#xA；	    */&#xA；	    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {&#xA；&#xA；	        &#xA；	if (&quot;ServiceSoap&quot;.equals(portName)) {&#xA；&#xA；	            setServiceSoapEndpointAddress(address);&#xA；	        }&#xA；	        else &#xA；	{ // Unknown Port Name&#xA；&#xA；	            throw new javax.xml.rpc.ServiceException(&quot; Cannot set Endpoint Address for Unknown Port&quot; + portName);&#xA；	        }&#xA；	    }&#xA；&#xA；	    /**&#xA；	    * Set the endpoint address for the specified port name.&#xA；	    */&#xA；	    public void setEndpointAddress(javax.xml.namespace.QName portName, java.lang.String address) throws javax.xml.rpc.ServiceException {&#xA；&#xA；	        setEndpointAddress(portName.getLocalPart(), address);&#xA；	    }&#xA；&#xA；	}&#xA；&#xA；	interface ServiceSoap extends java.rmi.Remote {&#xA；	    public java.lang.String finalInvoiceResponse(java.lang.String inputParm) throws java.rmi.RemoteException;&#xA；	}&#xA；&#xA；	class ServiceSoapStub extends org.apache.axis.client.Stub implements ServiceSoap {&#xA；	    private java.util.Vector cachedSerClasses = new java.util.Vector();&#xA；	    private java.util.Vector cachedSerQNames = new java.util.Vector();&#xA；	    private java.util.Vector cachedSerFactories = new java.util.Vector();&#xA；	    private java.util.Vector cachedDeserFactories = new java.util.Vector();&#xA；&#xA；	    static org.apache.axis.description.OperationDesc [] _operations;&#xA；&#xA；	    static {&#xA；&#xA；	        _operations = new org.apache.axis.description.OperationDesc[1];&#xA；	        _initOperationDesc1();&#xA；	    }&#xA；&#xA；	    private static void _initOperationDesc1(){&#xA；&#xA；	        org.apache.axis.description.OperationDesc oper;&#xA；	        org.apache.axis.description.ParameterDesc param;&#xA；	        oper = new org.apache.axis.description.OperationDesc();&#xA；	        oper.setName(&quot;FinalInvoiceResponse&quot;);&#xA；	        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(&quot;http://tempuri.org/&quot;, &quot;inputParm&quot;), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(&quot;http://www.w3.org/2001/XMLSchema&quot;, &quot;string&quot;), java.lang.String.class, false, false);&#xA；//	        param.setOmittable(true);&#xA；	        oper.addParameter(param);&#xA；	        oper.setReturnType(new javax.xml.namespace.QName(&quot;http://www.w3.org/2001/XMLSchema&quot;, &quot;string&quot;));&#xA；	        oper.setReturnClass(java.lang.String.class);&#xA；	        oper.setReturnQName(new javax.xml.namespace.QName(&quot;http://tempuri.org/&quot;, &quot;FinalInvoiceResponseResult&quot;));&#xA；	        oper.setStyle(org.apache.axis.constants.Style.WRAPPED);&#xA；	        oper.setUse(org.apache.axis.constants.Use.LITERAL);&#xA；	        _operations[0] = oper;&#xA；&#xA；	    }&#xA；&#xA；	    public ServiceSoapStub() throws org.apache.axis.AxisFault {&#xA；	         this(null);&#xA；	    }&#xA；&#xA；	    public ServiceSoapStub(java.net.URL endpointURL, javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {&#xA；	         this(service);&#xA；	         super.cachedEndpoint = endpointURL;&#xA；	    }&#xA；&#xA；	    public ServiceSoapStub(javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {&#xA；&#xA；	        if (service == null) {&#xA；&#xA；	            super.service = new org.apache.axis.client.Service();&#xA；	        } else {&#xA；&#xA；	            super.service = service;&#xA；	        }&#xA；	        ((org.apache.axis.client.Service)super.service).setTypeMappingVersion(&quot;1.2&quot;);&#xA；	    }&#xA；&#xA；	    protected org.apache.axis.client.Call createCall() throws java.rmi.RemoteException {&#xA；&#xA；	        try {&#xA；&#xA；	            org.apache.axis.client.Call _call = super._createCall();&#xA；	            if (super.maintainSessionSet) {&#xA；&#xA；	                _call.setMaintainSession(super.maintainSession);&#xA；	            }&#xA；	            if (super.cachedUsername != null) {&#xA；&#xA；	                _call.setUsername(super.cachedUsername);&#xA；	            }&#xA；	            if (super.cachedPassword != null) {&#xA；&#xA；	                _call.setPassword(super.cachedPassword);&#xA；	            }&#xA；	            if (super.cachedEndpoint != null) {&#xA；&#xA；	                _call.setTargetEndpointAddress(super.cachedEndpoint);&#xA；	            }&#xA；	            if (super.cachedTimeout != null) {&#xA；&#xA；	                _call.setTimeout(super.cachedTimeout);&#xA；	            }&#xA；	            if (super.cachedPortName != null) {&#xA；&#xA；	                _call.setPortName(super.cachedPortName);&#xA；	            }&#xA；	            java.util.Enumeration keys = super.cachedProperties.keys();&#xA；	            while (keys.hasMoreElements()) {&#xA；&#xA；	                java.lang.String key = (java.lang.String) keys.nextElement();&#xA；	                _call.setProperty(key, super.cachedProperties.get(key));&#xA；	            }&#xA；	            return _call;&#xA；	        }&#xA；	        catch (java.lang.Throwable _t) {&#xA；&#xA；	            throw new org.apache.axis.AxisFault(&quot;Failure trying to get the Call object&quot;, _t);&#xA；	        }&#xA；	    }&#xA；&#xA；	    public java.lang.String finalInvoiceResponse(java.lang.String inputParm) throws java.rmi.RemoteException {&#xA；&#xA；	        if (super.cachedEndpoint == null) {&#xA；&#xA；	            throw new org.apache.axis.NoEndPointException();&#xA；	        }&#xA；	        org.apache.axis.client.Call _call = createCall();&#xA；	        _call.setOperation(_operations[0]);&#xA；	        _call.setUseSOAPAction(true);&#xA；	        _call.setSOAPActionURI(&quot;http://tempuri.org/FinalInvoiceResponse&quot;);&#xA；	        _call.setEncodingStyle(null);&#xA；	        _call.setProperty(org.apache.axis.client.Call.SEND_TYPE_ATTR, Boolean.FALSE);&#xA；	        _call.setProperty(org.apache.axis.AxisEngine.PROP_DOMULTIREFS, Boolean.FALSE);&#xA；	        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);&#xA；	        _call.setOperationName(new javax.xml.namespace.QName(&quot;http://tempuri.org/&quot;, &quot;FinalInvoiceResponse&quot;));&#xA；&#xA；	        setRequestHeaders(_call);&#xA；	        setAttachments(_call);&#xA；	 try {&#xA；        java.lang.Object _resp = _call.invoke([inputParm] as java.lang.Object[]);&#xA；&#xA；	        if (_resp instanceof java.rmi.RemoteException) {&#xA；&#xA；	            throw (java.rmi.RemoteException)_resp;&#xA；	        }&#xA；	        else {&#xA；&#xA；	            extractAttachments(_call);&#xA；	            try {&#xA；&#xA；	                return (java.lang.String) _resp;&#xA；	            } catch (java.lang.Exception _exception) {&#xA；&#xA；	                return (java.lang.String) org.apache.axis.utils.JavaUtils.convert(_resp, java.lang.String.class);&#xA；	            }&#xA；	        }&#xA；	  } catch (org.apache.axis.AxisFault axisFaultException) {&#xA；&#xA；	  throw axisFaultException;&#xA；	}&#xA；	    }&#xA；&#xA；	}&#xA；&#xA；	interface Service extends javax.xml.rpc.Service {&#xA；	    public java.lang.String getServiceSoapAddress();&#xA；&#xA；	    public ServiceSoap getServiceSoap() throws javax.xml.rpc.ServiceException;&#xA；&#xA；	    public ServiceSoap getServiceSoap(java.net.URL portAddress) throws javax.xml.rpc.ServiceException;&#xA；	}" />
<digital-asset id="ArgoLockTablePurgeSample" short-description="ArgoLockTablePurgeSample" format="GROOVY" groovy-code=" package com.navis.extension.mtl &#xA；&#xA；import com.navis.argo.ArgoEntity&#xA；import com.navis.argo.ArgoField&#xA；import com.navis.argo.business.api.ArgoUtils&#xA；import com.navis.argo.business.api.GroovyApi&#xA；import com.navis.framework.persistence.HibernateApi&#xA；import com.navis.framework.portal.QueryUtils&#xA；import com.navis.framework.portal.UserContext&#xA；import com.navis.framework.portal.context.UserContextUtils&#xA；import com.navis.framework.portal.query.DomainQuery&#xA；import com.navis.framework.portal.query.PredicateFactory&#xA；import com.navis.framework.util.DateUtil&#xA；import org.apache.log4j.Logger;&#xA；&#xA；/**&#xA； * Created by sundaga on 30-09-2015.&#xA； * This groovy is about purging the Argo Lock table when the table size has grown significantly large &#xA； * This groovy can be executed directly through Groovy Job for purging ArgoLock table&#xA； * keeping 10 days record(by default).&#xA； * For user defined days Configure In General reference screen of N4 billing configure as Type :&quot;DAYSTORETAIN&quot;&#xA； * Identifier 1 :&quot;DAYSTORETAIN&quot;&#xA； * Value-1: &quot;1&quot;(user-configurable) &#xA； * If DAYSTORETAIN is not given , Argo lock records below 10 days from the date this groovy run(if this groovy is &#xA； * executed in 30-09-2015, then below 20-09-2015 created records will get purged)&#xA； */&#xA；&#xA；public class ArgoLockTablePurgeSample extends GroovyApi {&#xA；  public void execute(Map inParameters) {&#xA；    GroovyApi groovyApi = new GroovyApi();&#xA；    String daysToRetainStr = groovyApi.getReferenceValue(DAYSTORETAIN, DAYSTORETAIN, null, null, 1);&#xA；    LOGGER.warn(&quot;ArgoLockTablePurgeSample Started&quot;);&#xA；    UserContext usrContext = UserContextUtils.getSystemUserContext();&#xA；    Long daysToRetain = 10L;&#xA；    if (daysToRetainStr != null &amp;&amp; !daysToRetainStr.isEmpty()) {&#xA；      daysToRetain = Long.valueOf(daysToRetainStr);&#xA；    }&#xA；    long now = ArgoUtils.timeNowMillis();&#xA；    Date cutoff = new Date(now - DateUtil.MILLIS_PER_DAY * daysToRetain);&#xA；    LOGGER.warn(&quot;Date to consider for Purging ArgoLock &quot; + cutoff);&#xA；    DomainQuery dq = QueryUtils.createDomainQuery(ArgoEntity.ARGO_LOCK)&#xA；            .addDqPredicate(PredicateFactory.lt(ArgoField.LOCK_CREATED, cutoff));&#xA；    LOGGER.warn(&quot;dq&quot; + dq);&#xA；&#xA；    HibernateApi.getInstance().deleteByDomainQuery(dq);&#xA；    LOGGER.warn(&quot;ArgoLockTablePurgeSample Ended&quot;);&#xA；  }&#xA；  private static final Logger LOGGER = Logger.getLogger(ArgoLockTablePurgeSample.class);&#xA；  private static String DAYSTORETAIN =&quot;DAYSTORETAIN&quot;;&#xA；}&#xA；" />
</argo:snx>