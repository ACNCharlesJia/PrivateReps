<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<extension name="TariffRateDiscountCalculator"  language="GROOVY" contents=" package SourceCode.CodeExtensions&#xA；&#xA；import com.navis.argo.business.api.ArgoUtils&#xA；import com.navis.argo.business.atoms.ServiceQuantityUnitEnum&#xA；import com.navis.argo.business.services.IServiceExtract&#xA；import com.navis.argo.business.services.TieredCalculation&#xA；import com.navis.billing.BillingField&#xA；import com.navis.billing.business.model.*&#xA；import com.navis.billing.presentation.BillingPresentationConstants&#xA；import com.navis.external.billing.AbstractTariffRateCalculatorInterceptor&#xA；import com.navis.framework.metafields.MetafieldId&#xA；import com.navis.framework.metafields.MetafieldIdFactory&#xA；import com.navis.framework.portal.FieldChanges&#xA；import org.apache.log4j.Logger&#xA；&#xA；class TariffRateDiscountCalculator extends AbstractTariffRateCalculatorInterceptor {&#xA；    @Override&#xA；    void calculateRate(Map inOutMap) {&#xA；        LOGGER.info(String.format(&quot;At start of %s.execute at %s&quot;, getClass().getName(), ArgoUtils.timeNow()));&#xA；        if(inOutMap != null){&#xA；            Invoice invoice = (Invoice) inOutMap.get(BillingPresentationConstants.IN_INVOICE);&#xA；            TariffRate tariffRate = (TariffRate) inOutMap.get(BillingPresentationConstants.IN_TARIFF_RATE);&#xA；            IServiceExtract serviceExtract = (IServiceExtract) inOutMap.get(BillingPresentationConstants.IN_EXTRACT_EVENT);&#xA；            Date invPtd = invoice.getInvoicePaidThruDay();&#xA；            CurrencyExchangeRate exchangeRate = getCurrencyExchangeRate(invoice, serviceExtract, tariffRate);&#xA；            calculateBandedRate(invoice, serviceExtract, tariffRate, exchangeRate, inOutMap);&#xA；        }&#xA；&#xA；        LOGGER.info(String.format(&quot;At start of %s.execute at %s&quot;, getClass().getName(), ArgoUtils.timeNow()));&#xA；    }&#xA；&#xA；    private CurrencyExchangeRate getCurrencyExchangeRate(Invoice invoice, IServiceExtract iServiceExtract, TariffRate tariffRate) {&#xA；        CurrencyExchangeRate exchangeRate = null;&#xA；        if (tariffRate != null) {&#xA；            //get Currency conversation rate&#xA；            Currency fromCurrency = tariffRate.getRateCurrency();&#xA；            Currency toCurrency = invoice.getInvoiceCurrency();&#xA；            LOGGER.debug(&quot;Getting the exchange rate for From Currency: &quot; + fromCurrency.getCurrencyId() + &quot; To Currency: &quot; + toCurrency.getCurrencyId())&#xA；&#xA；            // Not required to get exchange rate if both the currency ids are same.&#xA；            if (!fromCurrency.equals(toCurrency)) {&#xA；                // exchange date may differ based on the rule defined for each&#xA；                BillingCurrencyExchangeManager bcem = new BillingCurrencyExchangeManager();&#xA；                Date exchangeEffectiveDate = bcem.getCurrencyExchangeDate(iServiceExtract, invoice);&#xA；                exchangeRate = fromCurrency.findEffectiveExchangeRate(toCurrency, exchangeEffectiveDate);&#xA；            }&#xA；        }&#xA；&#xA；        return exchangeRate;&#xA；    }&#xA；&#xA；    private void calculateBandedRate(Invoice invoice, IServiceExtract iServiceExtract, TariffRate tariffRate,&#xA；                                     CurrencyExchangeRate currencyExchangeRate, Map inOutMap) {&#xA；        InvoiceMessage.registerDebug(invoice, &quot;Rate type - Banded Rate&quot;);&#xA；        ServiceType serviceType = ServiceType.findServiceType(iServiceExtract.getServiceId());&#xA；        MetafieldId tieredField = serviceType.getPredicateMetafieldId();&#xA；        TieredCalculation calcInput = null;&#xA；        if (tieredField != null) {&#xA；            InvoiceMessage.registerDebug(invoice, &quot;calculateBandedRate: TieredField defined in ServiceType &quot; + tieredField.getFieldId());&#xA；            calcInput = iServiceExtract.getTieredCalculation(tieredField);&#xA；        } else {&#xA；            InvoiceMessage.registerError(invoice, &quot;calculateBandedRate: TieredField is not defined in ServiceType&quot;);&#xA；        }&#xA；&#xA；        if (calcInput != null) {&#xA；            double qtyOwed = iServiceExtract.getNullSafeQuantity();&#xA；            if (serviceType.getSrvctypeUseTieredFieldAsQuantity()) {&#xA；                qtyOwed = calcInput.getQtyOwed() * qtyOwed;&#xA；            }&#xA；&#xA；            InvoiceMessage.registerDebug(invoice, &quot;calculateBandedRate use invoice item quantity as :&quot; + qtyOwed)&#xA；            double tierQuantity = calcInput.getQtyOwed()&#xA；            TariffRateTier tierForQuantity = tariffRate.findTierForQuantity(new Long((long)Math.ceil(tierQuantity)))&#xA；            InvoiceMessage.registerDebug(invoice, &quot;calculateBandedRate tierForQuantity:&quot; + tierForQuantity)&#xA；            Double discountRate = tierForQuantity.getField(MetafieldIdFactory.valueOf(&quot;customFlexFields.tierCustomDFFDiscountRate&quot;))&#xA；            LOGGER.info(&quot;discountRate : &quot; + discountRate)&#xA；&#xA；            if(discountRate &gt; 0){&#xA；                handleDiscountRate(invoice, discountRate ,inOutMap, tierForQuantity)&#xA；            }&#xA；        }&#xA；    }&#xA；&#xA；    private void handleDiscountRate(Invoice invoice, Double discountRate, Map inOutMap, TariffRateTier tariffRateTier) {&#xA；        FieldChanges fieldChanges = new FieldChanges();&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_AMOUNT, tariffRateTier.tierFlatRateAmount);&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_INVOICE, invoice);&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_TARIFF_RATE, tariffRateTier.getTierTariffRate());&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_DESCRIPTION, tariffRateTier.getTierDescription());&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_QUANTITY_BILLED, 1D);&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_QUANTITY_UNIT, ServiceQuantityUnitEnum.DAYS);&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_QUANTITY, 1D);&#xA；        String itemNotes = &quot;Discount Rate : &quot; + discountRate;&#xA；        fieldChanges.setFieldChange(BillingField.ITEM_NOTES, itemNotes);&#xA；&#xA；        inOutMap.put(BillingPresentationConstants.OUT_AMOUNT, tariffRateTier.tierFlatRateAmount);&#xA；        inOutMap.put(BillingPresentationConstants.INV_ITEM_CHANGES, fieldChanges);&#xA；        String invoiceNotes = invoice.getInvoiceNotes();&#xA；        if(invoiceNotes == null || invoiceNotes.isEmpty()){&#xA；            invoice.setFieldValue(BillingField.INVOICE_NOTES,INVOICE_NOTE);&#xA；        }&#xA；    }&#xA；&#xA；    private final String INVOICE_NOTE = &quot;Paper Rate +  Credit Note&quot;;&#xA；    private final Logger LOGGER = Logger.getLogger(TariffRateDiscountCalculator.class);&#xA；}" />
</argo:snx>